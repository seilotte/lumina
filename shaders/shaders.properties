dynamicHandLight = false
vignette = false
shadowPlayer = false

#if CLOUDS == 0
    clouds = off
#elif CLOUDS == 1
    clouds = fast
#else
    clouds = fancy
#endif

# =========

texture.noise = program/lib/noise_water.png
# texture.deferred.depthtex2 = minecraft:textures/environment/clouds.png

# =========

size.buffer.colortex7 = SS_GIAOCL_RESOLUTION SS_GIAOCL_RESOLUTION
size.buffer.colortex8 = SS_GIAOCL_RESOLUTION SS_GIAOCL_RESOLUTION

# =========

program.world0/composite99.enabled = DEBUG

shadow.enabled = MAP_SHADOW
dh_shadow.enabled = false

program.world0/deferred.enabled  = SS_GI || SS_AO || SS_CL
# program.world0/deferred1.enabled = false
program.world0/composite.enabled  = REF || REF_WATER
program.world0/composite1.enabled = TAA
program.world0/composite2.enabled = VHS

# =========

alphaTest.shadow                        = off
alphaTest.gbuffers_skybasic             = off
alphaTest.dh_terrain                    = off
alphaTest.dh_generic                    = off
alphaTest.dh_water                      = off
alphaTest.gbuffers_textured_lit         = off
alphaTest.gbuffers_armor_glint          = off
alphaTest.gbuffers_beaconbeam           = off
alphaTest.gbuffers_line                 = off
alphaTest.gbuffers_clouds               = off

blend.shadow                            = off
bleng.gbuffers_skybasic                 = off
blend.dh_terrain                        = off
blend.dh_generic                        = off
blend.dh_water                          = off
blend.gbuffers_textured_lit             = off
blend.gbuffers_armor_glint              = off
bleng.gbuffers_beaconbeam               = off
blend.gbuffers_line                     = off
blend.gbuffers_clouds                   = off

blend.gbuffers_armor_glint              = ONE ONE ONE ZERO
blend.dh_water.colortex0                = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_textured_lit.colortex0   = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO

# ========= User Interface

screen.columns = 1
screen = \
[TEXTURES] \
[MAT_AMBIENT] \
[MAT_ALBEDO] \
[MAT_SPECULAR] \
[MAT_DIFFUSE] \
[MAT_LIGHTS] \
[MAT_REFLECTIONS] \
[ENVIRONMENT] \
<empty> \
[DISPLACEMENT] \
[POST_PROCESSING] \
[MISC]



screen.DISPLACEMENT.columns = 2
screen.DISPLACEMENT = \
DIS_FOLLIAGE                DIS_FOLLIAGE_STRENGTH \
<empty>                     DIS_FOLLIAGE_SPEED \
<empty>                     <empty> \
DIS_WATER                   DIS_WATER_STRENGTH \
<empty>                     DIS_WATER_SPEED



screen.TEXTURES.columns = 2
screen.TEXTURES = \
MAP_ALBEDO                  <empty> \
<empty>                     <empty> \
MAP_SPECULAR                <empty> \
<empty>                     <empty> \
MAP_NORMAL                  <empty> \
<empty>                     <empty> \
MAP_NORMAL_WATER            MAP_NORMAL_WATER_STRENGTH \
<empty>                     MAP_NORMAL_WATER_SPEED



screen.MAT_AMBIENT.columns = 2
screen.MAT_AMBIENT = \
AMBIENT                     AMBIENT_INTENSITY \
<empty>                     <empty> \
SS_GI                       SS_GIAOCL_RESOLUTION \
SS_AO                       SS_GIAOCL_ITERATIONS \
<empty>                     SS_GIAOCL_RADIUS \
<empty>                     <empty> \
ambientOcclusionLevel       <empty>

screen.MAT_ALBEDO.columns = 2
screen.MAT_ALBEDO = \
ALBEDO                      <empty> \
<empty>                     <empty> \
VCOL                        <empty> \
<empty>                     <empty> \
DH_VCOL_NOISE               DH_VCOL_NOISE_SIZE

screen.MAT_SPECULAR.columns = 2
screen.MAT_SPECULAR = \
SPECULAR                    <empty>

screen.MAT_DIFFUSE.columns = 2
screen.MAT_DIFFUSE = \
DIFFUSE                     DIFFUSE_INTENSITY \
<empty>                     <empty> \
MAP_SHADOW                  MAP_SHADOW_PIXEL \
<empty>                     shadowMapResolution \
<empty>                     shadowDistance \
<empty>                     <empty> \
SS_SHADOWS                  SS_SHADOWS_ITERATIONS \
<empty>                     SS_SHADOWS_STRIDE \
<empty>                     <empty> \
sunPathRotation             <empty>

screen.MAT_LIGHTS.columns = 2
screen.MAT_LIGHTS = \
LIGHTS_HAND                 LIGHTS_INTENSITY \
<empty>                     <empty> \
SS_CL                       SS_GIAOCL_RESOLUTION \
<empty>                     SS_GIAOCL_ITERATIONS \
<empty>                     SS_GIAOCL_RADIUS \
<empty>                     LIGHTS_INTENSITY

screen.MAT_REFLECTIONS.columns = 2
screen.MAT_REFLECTIONS = \
REF                         REF_INTENSITY \
<empty>                     <empty> \
REF_WATER                   REF_WATER_INTENSITY \
<empty>                     <empty>



screen.ENVIRONMENT.columns = 2
screen.ENVIRONMENT = \
FOG                         FOG_STRENGTH \
<empty>                     <empty> \
FOG_WATER                   FOG_WATER_STRENGTH \
<empty>                     <empty> \
CLOUDS                      CLOUDS_GRADIENT \
<empty>                     RENDER_CLOUDS_VANILLA



screen.POST_PROCESSING.columns = 2
screen.POST_PROCESSING = \
TAA                         TAA_FAC \
<empty>                     <empty> \
VHS                         VHS_TYPE \
<empty>                     VHS_DOWNSCALE



screen.MISC.columns = 2
screen.MISC = \
RENDER_TERRAIN              <empty> \
RENDER_BEACON_BEAMS         <empty> \
RENDER_DISTANT_HORIZONS     <empty> \
<empty>                     <empty> \
TRANSPARENT_WATER_CAULDRON  <empty>



sliders = \
DIS_FOLLIAGE_STRENGTH DIS_FOLLIAGE_SPEED \
DIS_WATER_STRENGTH DIS_WATER_SPEED \
\
MAP_NORMAL_WATER_STRENGTH MAP_NORMAL_WATER_SPEED \
\
AMBIENT_INTENSITY \
SS_GIAOCL_RESOLUTION SS_GIAOCL_ITERATIONS SS_GIAOCL_RADIUS \
\
DH_VCOL_NOISE_SIZE \
\
DIFFUSE_INTENSITY \
MAP_SHADOW_PIXEL shadowMapResolution shadowDistance \
SS_SHADOWS_ITERATIONS SS_SHADOWS_STRIDE \
sunPathRotation \
\
LIGHTS_INTENSITY \
\
REF_INTENSITY \
REF_WATER_INTENSITY \
\
FOG_STRENGTH \
FOG_WATER_STRENGTH \
CLOUDS \
\
TAA_FAC \
VHS_TYPE

# ========= Custom Uniforms

uniform.vec2.c_viewResolution = vec2(viewWidth, viewHeight)
uniform.vec2.c_viewPixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

uniform.float.c_farPlane = far * 4.0

uniform.vec3.c_sunDirection = sunPosition * vec3(0.01, 0.01, 0.01)
uniform.vec3.c_shadowLightDirection = shadowLightPosition * vec3(0.01, 0.01, 0.01)

# === Factors

uniform.float.c_facRain = 1.0 - rainStrength * 0.5

uniform.float.c_isSunrise = \
if( \
between(worldTime, 0, 999),       1.0 -  worldTime          * 0.001, \
between(worldTime, 23000, 23999),       (worldTime - 23000) * 0.001, \
0.0 \
)
uniform.float.c_isSunset = \
if( \
between(worldTime, 11000, 11999),       (worldTime - 11000) * 0.001, \
between(worldTime, 12000, 12999), 1.0 - (worldTime - 12000) * 0.001, \
0.0 \
)
uniform.float.c_isDay = \
if( \
between(worldTime, 0, 999),              worldTime          * 0.0005 + 0.5, \
between(worldTime, 1000, 10999),  1.0, \
between(worldTime, 11000, 12999), 1.0 - (worldTime - 11000) * 0.0005, \
between(worldTime, 23000, 23999),       (worldTime - 23000) * 0.0005, \
0.0 \
)
uniform.float.c_isNight = 1.0 - c_isDay

# === Sky

# clouds
uniform.vec3.c_colClouds = \
vec3( \
    (0.2 + 0.8 * c_isDay) * c_facRain, \
    (0.2 + 0.8 * c_isDay) * c_facRain, \
    (0.4 + 0.7 * c_isDay) * c_facRain, \
)

# zenith/sky
uniform.vec3.c_colZenith = \
vec3(0.1, 0.2, 0.3) + vec3(0.35, 0.43, 0.70) * vec3(c_isDay, c_isDay, c_isDay)

# sun
variable.vec3.c_sun = \
vec3(0.1, 0.1, 0.3) + vec3(0.8, 0.74, 0.49) * vec3(c_isDay, c_isDay, c_isDay)

variable.vec3.c_sunrise = \
c_sun + (vec3(1.0, 0.6, 0.2) - c_sun) * vec3(c_isSunrise, c_isSunrise, c_isSunrise)
variable.vec3.c_sunset = \
c_sun + (vec3(1.0, 0.5, 0.2) - c_sun) * vec3(c_isSunset, c_isSunset, c_isSunset)

uniform.vec3.c_colSun = \
vec3( \
if(c_isSunrise > 0.0, c_sunrise.x, c_isSunset > 0.0, c_sunset.x, c_sun.x), \
if(c_isSunrise > 0.0, c_sunrise.y, c_isSunset > 0.0, c_sunset.y, c_sun.y), \
if(c_isSunrise > 0.0, c_sunrise.z, c_isSunset > 0.0, c_sunset.z, c_sun.z), \
)

# fog
uniform.vec3.c_colFog = \
vec3(0.035, 0.04, 0.07) + vec3(0.665, 0.76, 0.93) * vec3(c_isDay, c_isDay, c_isDay)



variable.float.sun_dir_x = \
gbufferModelViewInverse.0.0 * c_sunDirection.x + \
gbufferModelViewInverse.1.0 * c_sunDirection.y + \
gbufferModelViewInverse.2.0 * c_sunDirection.z
variable.float.sun_dir_y = \
gbufferModelViewInverse.0.1 * c_sunDirection.x + \
gbufferModelViewInverse.1.1 * c_sunDirection.y + \
gbufferModelViewInverse.2.1 * c_sunDirection.z
variable.float.sun_dir_z = \
gbufferModelViewInverse.0.2 * c_sunDirection.x + \
gbufferModelViewInverse.1.2 * c_sunDirection.y + \
gbufferModelViewInverse.2.2 * c_sunDirection.z

# rotate around the z-axis by 90Â°
# uniform.vec3.c_sunDirScene90z = vec3(-sun_dir_y, sun_dir_x, sun_dir_z)
uniform.vec3.c_sunDirScene90z = \
vec3( \
if(c_isSunset > 0.0,  sun_dir_y, -sun_dir_y), \
if(c_isSunset > 0.0, -sun_dir_x,  sun_dir_x), \
if(c_isSunset > 0.0, -sun_dir_z,  sun_dir_z) \
)

# === Water

variable.float.c_water_r = \
if( \
in(biome, BIOME_CHERRY_GROVE), 0.361, \
in(biome, BIOME_MEADOW), 0.055, \
in(biome, BIOME_WARM_OCEAN), 0.263, \
in(biome, BIOME_LUKEWARM_OCEAN, BIOME_DEEP_LUKEWARM_OCEAN), 0.271, \
in(biome, BIOME_COLD_OCEAN, BIOME_DEEP_COLD_OCEAN, BIOME_SNOWY_TAIGA, BIOME_SNOWY_BEACH), 0.239, \
in(biome, BIOME_FROZEN_RIVER, BIOME_FROZEN_OCEAN, BIOME_DEEP_FROZEN_OCEAN), 0.224, \
in(biome, BIOME_SWAMP), 0.38, \
in(biome, BIOME_MANGROVE_SWAMP), 0.227, \
0.247 \
)
variable.float.c_water_g = \
if( \
in(biome, BIOME_CHERRY_GROVE), 0.708, \
in(biome, BIOME_MEADOW), 0.306, \
in(biome, BIOME_WARM_OCEAN), 0.835, \
in(biome, BIOME_LUKEWARM_OCEAN, BIOME_DEEP_LUKEWARM_OCEAN), 0.678, \
in(biome, BIOME_COLD_OCEAN, BIOME_DEEP_COLD_OCEAN, BIOME_SNOWY_TAIGA, BIOME_SNOWY_BEACH), 0.341, \
in(biome, BIOME_FROZEN_RIVER, BIOME_FROZEN_OCEAN, BIOME_DEEP_FROZEN_OCEAN), 0.22, \
in(biome, BIOME_SWAMP), 0.482, \
in(biome, BIOME_MANGROVE_SWAMP), 0.478, \
0.463 \
)
variable.float.c_water_b = \
if( \
in(biome, BIOME_CHERRY_GROVE), 0.930, \
in(biome, BIOME_MEADOW), 0.812, \
in(biome, BIOME_WARM_OCEAN), 0.933, \
in(biome, BIOME_LUKEWARM_OCEAN, BIOME_DEEP_LUKEWARM_OCEAN), 0.949, \
in(biome, BIOME_COLD_OCEAN, BIOME_DEEP_COLD_OCEAN, BIOME_SNOWY_TAIGA, BIOME_SNOWY_BEACH), 0.839, \
in(biome, BIOME_FROZEN_RIVER, BIOME_FROZEN_OCEAN, BIOME_DEEP_FROZEN_OCEAN), 0.788, \
in(biome, BIOME_SWAMP), 0.392, \
in(biome, BIOME_MANGROVE_SWAMP), 0.416, \
0.894 \
)
uniform.vec3.c_colWater = vec3(c_water_r, c_water_g, c_water_b)

# Not trully absorb and scatter values.
uniform.vec3.c_colWaterAbsorb = vec3( \
    0.4 - 0.1 * rainStrength, \
    0.45 - 0.1 * rainStrength, \
    0.4 - 0.1 * rainStrength \
)

uniform.vec3.c_colWaterScatter = vec3( \
    1.0 - 0.5 * rainStrength, \
    2.2 - 1.1 * rainStrength, \
    1.0 - 0.5 * rainStrength \
)
