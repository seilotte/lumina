# between(00000, 00999) // sunrise -> day
# between(01000, 10999) // day
# between(11000, 11999) // day -> sunset
# between(12000, 12999) // sunset -> night
# between(13000, 22999) // night
# between(23000, 23999) // night -> sunrise

# normalize = (x - min) / (max - min)

// =========

// gProjInv
// gMVInv
// gCamPos
// gPrevMV
// gPrevProj

R.x = M[0][0]⋅P.x + M[0][1]⋅P.y + M[0][2]⋅P.z + M[0][3]⋅P.w
R.y = M[1][0]⋅P.x + M[1][1]⋅P.y + M[1][2]⋅P.z + M[1][3]⋅P.w
R.z = M[2][0]⋅P.x + M[2][1]⋅P.y + M[2][2]⋅P.z + M[2][3]⋅P.w
R.w = M[3][0]⋅P.x + M[3][1]⋅P.y + M[3][2]⋅P.z + M[3][3]⋅P.w

// =========

vec3 col_absorb = mix( // not trully absorb values
    vec3(.4f, .45f, .4f),
    vec3(.3f, .35f, .3f),
    rainStrength
);

vec3 col_scatter = mix( // not trully scatter values
    vec3(1.f, 2.2f, 1.f),
    vec3(.5f, 1.1f, .5f),
    rainStrength
);

# =========

chunk   1/chunk  value    1/value     log2        1/log2
1       1.0      16.0     0.0625      4.0         0.25
2       0.5      32.0     0.03125     5.0         0.2
3       0.33333  48.0     0.02083     5.58496     0.17905
4       0.25     64.0     0.01562     6.0         0.16667
5       0.2      80.0     0.0125      6.32193     0.15818
6       0.16667  96.0     0.01042     6.58496     0.15186
7       0.14286  112.0    0.00893     6.80735     0.1469
8       0.125    128.0    0.00781     7.0         0.14286
9       0.11111  144.0    0.00694     7.16993     0.13947
10      0.1      160.0    0.00625     7.32193     0.13658
11      0.09091  176.0    0.00568     7.45943     0.13406
12      0.08333  192.0    0.00521     7.58496     0.13184
13      0.07692  208.0    0.00481     7.70044     0.12986
14      0.07143  224.0    0.00446     7.80735     0.12808
15      0.06667  240.0    0.00417     7.90689     0.12647
16      0.0625   256.0    0.00391     8.0         0.125
17      0.05882  272.0    0.00368     8.08746     0.12365
18      0.05556  288.0    0.00347     8.16993     0.1224
19      0.05263  304.0    0.00329     8.24793     0.12124
20      0.5      320.0    0.00313     8.32193     0.12016
21      0.04762  336.0    0.00298     8.39232     0.11916
22      0.04545  352.0    0.00284     8.45943     0.11821
23      0.04348  368.0    0.00272     8.52356     0.11732
24      0.04167  384.0    0.0026      8.58496     0.11648
25      0.04     400.0    0.0025      8.64386     0.11569
26      0.03846  416.0    0.0024      8.70044     0.11494
27      0.03704  432.0    0.00231     8.75489     0.11422
28      0.03571  448.0    0.00223     8.80735     0.11354
29      0.03448  464.0    0.00216     8.85798     0.11289
30      0.03333  480.0    0.00208     8.90689     0.11227
31      0.03226  496.0    0.00202     8.9542      0.11168
32      0.03125  512.0    0.00195     9.0         0.11111

# =========

§0: Black
§1: Dark Blue
§2: Dark Green
§3: Dark Aqua
§4: Dark Red
§5: Dark Purple
§6: Gold
§7: Grey
§8: Dark Grey
§9: Blue
§a: Green
§b: Aqua
§c: Red
§d: Light Purple
§e: Yellow
§f: White

# =========

RGBA32UI    [r][4x8] none.rgba RGBA8
            [g][4x8] none.rgba RGBA8
            [b][4x8] none.rgba RGBA8
            [a][4x8] none.rgba RGBA8

RGBA16UI    [r][4x4] none.rgba RGBA4
            [g][4x4] none.rgba RGBA4
            [b][4x4] none.rgba RGBA4
            [a][4x4] none.rgba RGBA4

RGBA8UI     [r][4x2] none.rgba RGBA2
            [g][4x2] none.rgba RGBA2
            [b][4x2] none.rgba RGBA2
            [a][4x2] none.rgba RGBA2

            normals.xyz -> encode() -> normals.xy
            uv_lightmap.xy
            stencil.a
            col_sky.rgb
            col_emissives.rgb

            ssgi.rgb
            ssao.a
            col_lights.rgb

            taa_previous_frame.rgb

# =========

// https://shaders.properties/reference/macros/render_stages/
00 MC_RENDER_STAGE_NONE
01 MC_RENDER_STAGE_SKY
02 MC_RENDER_STAGE_SUNSET
03 MC_RENDER_STAGE_CUSTOM_SKY
04 MC_RENDER_STAGE_SUN
05 MC_RENDER_STAGE_MOON
06 MC_RENDER_STAGE_STARS
07 MC_RENDER_STAGE_VOID
08 MC_RENDER_STAGE_TERRAIN_SOLID
09 MC_RENDER_STAGE_TERRAIN_CUTOUT_MIPPED*
10 MC_RENDER_STAGE_TERRAIN_CUTOUT*
11 MC_RENDER_STAGE_ENTITIES
12 MC_RENDER_STAGE_BLOCK_ENTITIES
13 MC_RENDER_STAGE_DESTROY*
14 MC_RENDER_STAGE_OUTLINE
15 MC_RENDER_STAGE_DEBUG*
16 MC_RENDER_STAGE_HAND_SOLID
17 MC_RENDER_STAGE_TERRAIN_TRANSLUCENT
18 MC_RENDER_STAGE_TRIPWIRE*
19 MC_RENDER_STAGE_PARTICLES
20 MC_RENDER_STAGE_CLOUDS
21 MC_RENDER_STAGE_RAIN_SNOW
22 MC_RENDER_STAGE_WORLD_BORDER
23 MC_RENDER_STAGE_HAND_TRANSLUCENT
